"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var App = function App() {
  _classCallCheck(this, App);

  var self = this;
  var BREAKPOINTS = {
    'XS': 576,
    'SM': 769,
    'MD': 992,
    'LG': 1220
  };
  var HEADER_OFFSET = {
    'XS': 70,
    'MD': 80,
    'LG': 90,
    'XL': 100
  };
  var windowWidth = 0;
  var isSM = false;
  var headerMenu = new HeaderMenu();
  var scrollTo = new ScrollTo(); // Resize event

  window.onresize = function () {
    windowWidth = this.innerWidth;
    if (windowWidth < BREAKPOINTS.XS) scrollTo.setOffset = HEADER_OFFSET.XS;else if (windowWidth < BREAKPOINTS.MD) scrollTo.setOffset = HEADER_OFFSET.MD;else if (windowWidth < BREAKPOINTS.LG) scrollTo.setOffset = HEADER_OFFSET.LG;else scrollTo.setOffset = HEADER_OFFSET.XL;

    if (windowWidth < BREAKPOINTS.SM) {
      isSM = false;
    }

    if (windowWidth >= BREAKPOINTS.SM) {
      if (!isSM) headerMenu.hide();
      isSM = true;
    }
  };

  window.dispatchEvent(new Event('resize'));
};

window.addEventListener('DOMContentLoaded', function () {
  new App();
});
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var HeaderMenu = /*#__PURE__*/function () {
  function HeaderMenu() {
    var _this = this;

    _classCallCheck(this, HeaderMenu);

    // Классы
    this.menuClass = 'header__menu';
    this.menuActiveClass = this.menuClass + '--active';
    this.menuToggleClass = 'header__menu_toggle';
    this.menuToggleActiveClass = this.menuToggleClass + '--active'; // Элементы

    this.menuEl = document.querySelector('.' + this.menuClass);
    this.menuToggleEl = document.querySelector('.' + this.menuToggleClass); // События

    this.menuToggleEl.addEventListener('click', function () {
      _this.toggle(_this.menuActiveClass, _this.menuToggleActiveClass);
    }); // Overlay init

    this.overlay = new Overlay([this.menuActiveClass, this.menuToggleActiveClass]);
  }

  _createClass(HeaderMenu, [{
    key: "toggle",
    value: function toggle() {
      this.menuEl.classList.toggle(this.menuActiveClass);
      this.menuToggleEl.classList.toggle(this.menuToggleActiveClass);
      this.overlay.toggle();
    }
  }, {
    key: "show",
    value: function show() {
      if (!this.menuEl.classList.contains(this.menuActiveClass)) this.toggle();
    }
  }, {
    key: "hide",
    value: function hide() {
      if (this.menuEl.classList.contains(this.menuActiveClass)) this.toggle();
    }
  }]);

  return HeaderMenu;
}();
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Overlay = /*#__PURE__*/function () {
  function Overlay(hideElementsClasses) {
    var _this = this;

    _classCallCheck(this, Overlay);

    // Классы
    this.overlayClass = 'overlay';
    this.overlayActiveClass = this.overlayClass + '--active'; // Элементы

    this.bodyEl = document.getElementsByTagName('body')[0];
    this.overlayEl = document.querySelector('.' + this.overlayClass); // События

    this.overlayEl.addEventListener('click', function () {
      _this.hide();

      if (hideElementsClasses.length) {
        for (var i = 0; i < hideElementsClasses.length; i++) {
          document.getElementsByClassName(hideElementsClasses[i])[0].classList.remove(hideElementsClasses[i]);
        }
      }
    });
  }

  _createClass(Overlay, [{
    key: "_getScrollbarWidth",
    value: function _getScrollbarWidth() {
      var outer = document.createElement('div');
      outer.style.visibility = 'hidden';
      outer.style.overflow = 'scroll';
      outer.style.msOverflowStyle = 'scrollbar';
      document.body.appendChild(outer);
      var inner = document.createElement('div');
      outer.appendChild(inner);
      var scrollbarWidth = outer.offsetWidth - inner.offsetWidth;
      outer.parentNode.removeChild(outer);
      return scrollbarWidth;
    }
  }, {
    key: "toggle",
    value: function toggle() {
      this.overlayEl.classList.toggle(this.overlayActiveClass);
      this.bodyEl.classList.toggle('fixed');
    }
  }, {
    key: "show",
    value: function show() {
      if (!this.overlayEl.classList.contains(this.overlayActiveClass)) this.toggle();
    }
  }, {
    key: "hide",
    value: function hide() {
      if (this.overlayEl.classList.contains(this.overlayActiveClass)) this.toggle();
    }
  }]);

  return Overlay;
}();
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ScrollTo = /*#__PURE__*/function () {
  function ScrollTo() {
    _classCallCheck(this, ScrollTo);

    var self = this;
    this.offset = 0;
    var linksEl = document.querySelectorAll('a[href^="#"]');

    _toConsumableArray(linksEl).forEach(function (el) {
      return el.addEventListener('click', function (e) {
        e.preventDefault();
        var y = 0;
        var id = e.target.hash.substr(1);
        if (id) y = document.getElementById(id).getBoundingClientRect().top + window.scrollY;
        window.scroll({
          top: y - self.offset,
          behavior: 'smooth'
        });
      });
    });
  }

  _createClass(ScrollTo, [{
    key: "setOffset",
    set: function set(offset) {
      this.offset = offset;
    }
  }]);

  return ScrollTo;
}();
//# sourceMappingURL=script.min.js.map
